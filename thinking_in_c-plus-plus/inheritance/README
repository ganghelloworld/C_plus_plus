order.cpp
	run: g++ order.cpp
		./a.out
测试了在继承及组合中，构造函数的调用次序

====================================

name_hid3.cpp
	run: g++ name_hide.cpp
		./a.out
测试了子类对父类的函数进行overload(函数名一样，函数的参数不一样)和redefine(函数名和函数参数都一样), 还有当返回类型不一样时:
父类中的同名函数都对于子类不可见了。（这个和JAVA有很大区别）

===================================

func_noauto_inherit.cpp
	run: g++ func_noauto_inherit.cpp
		 ./a.out
测试子类对于父类的构造函数，拷贝构造函数，及赋值操作符的继承情况

1. 子类不会继承父类的构造函数和拷贝构造函数，但是子类在没有显式调用父类构造函数时，编译器会自动调用父类没有参数的构造函数，若子类没有定义构造函数，编译器也会自动生成一个无参数的构造函数
2. 对于赋值操作，子类在没有定义的情况下，编译器也会自动生成一个来自动的调用父类的赋值操作;若子类定义了赋值操作，但是没有显式调用父类的构造函数，那么编译器不会自动调用父类的赋值操作的
3. 显式申明的类型转换是会继承的（operator Class()这种类型的）
4. 除了赋值操作的重载不会继承外，其他操作符的重载都是会继承的

===================================

private_inherit.cpp
	run: g++ private_inherit.cpp
		 ./a.out
测试了私有继承的用法
私有继承时，父类的公共方法在子类中把public 都变成了private，也就是说在子类中还是可以访问这些成员的，只是外面没办法访问了。可以用域解析的办法让private再次变成public

===================================
