run it with:
	g++ smart_pointer.cpp
	./a.out
or
	g++ nested_smart_pointer.cpp
	./a.out

此程序测试了操作符重载，重载了++和--，还有->三个操作符
此外还简单演示了如何用一个封装的指针便利一个容器的内容


problem:
	friend似乎有问题，在nested_smart_pointer.cpp文件中，把SmartPointer加或者不加为friend,均不影响程序的编译和运行，一下形式均正常运行
1.	/===========
	class SmartPointer;
	friend SmartPointer;
	class SmartPointer
	{
		...
	};
	============/

	如下形式均正常运行
2.	/===========
	class SmartPointer
	{
		...
	};
	friend SmartPointer;
	============/

3.	/===========
	friend SmartPointer;
	class SmartPointer
	{
		...
	};
	============/

4.	/===========
	class SmartPointer
	{
		...
	};
	============/

需要深层次了解friend的内容，和有关编译器的改进


解决：
	最初的猜想还算靠谱，这和C++标准的改变有关系，从现在的标准看来，将一个类声明为内部类之后，就像申明了一个成员方法一样，可以访问外部类的私有成员。
	但是外部类不能访问内部类的私有成员

	早前的C++标准应该和书上说的一样，如果想让一个nested class访问外部类的私有成员，就必须如上1所示的步骤申明。
